import argparse
import pandas as pd
from datetime import datetime, timedelta
from statistics import mean, stdev


def parse_console_args(parser):
    parser.add_argument('--received_file', help='file generated by receive.py', required=True)
    parser.add_argument('--sent_file', help='file generated by send.py', required=True)
    return parser.parse_args()

def parse_receive_file(file_path):
    data = pd.read_csv(file_path)
    received_at_times = list(map(lambda t: datetime.strptime(t, "%Y-%m-%d %H:%M:%S.%f"), data["received_at"].values))
    return received_at_times

def parse_send_file(file_path):
    data = pd.read_csv(file_path)
    sent_at_times = list(map(lambda t: datetime.strptime(t, "%Y-%m-%d %H:%M:%S.%f"), data["sent_at"].values))
    return sent_at_times

def calculate_packet_end_to_end(sent_at_times, received_at_times):
    return list(map(lambda t: timedelta.total_seconds(t[1] - t[0]), zip(sent_at_times, received_at_times)))

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
                        prog='speed-statistics',
                        description='Receives pmu packets',
                        epilog='Text at the bottom of help')
    args = parse_console_args(parser)
    end_to_end_times = calculate_packet_end_to_end(parse_send_file(args.sent_file), parse_receive_file(args.received_file))
    print("Mean time: " + str(mean(end_to_end_times)))
    print("Smallest time: " + str(min(end_to_end_times)))
    print("Std dev: " + str(stdev(end_to_end_times)))